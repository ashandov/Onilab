function time(){today=new Date,today=Math.floor((timeend-today)/1e3),tsec=today%60,today=Math.floor(today/60),tsec<10&&(tsec="0"+tsec),tmin=today%60,today=Math.floor(today/60),tmin<10&&(tmin="0"+tmin),thour=today%24,today=Math.floor(today/24),document.getElementsByClassName("counter__days")[0].innerHTML=today,document.getElementsByClassName("counter__hours")[0].innerHTML=thour,document.getElementsByClassName("counter__minutes")[0].innerHTML=tmin,document.getElementsByClassName("counter__seconds")[0].innerHTML=tsec,window.setTimeout("time()",1e3)}document.addEventListener("DOMContentLoaded",(function(){var e=[].slice.call(document.querySelectorAll("img.lazy")),t=[].slice.call(document.querySelectorAll(".lazy-background")),n=[].slice.call(document.querySelectorAll("[data-bg]"));if("IntersectionObserver"in window){let o=new IntersectionObserver((function(e,t){e.forEach((function(e){if(e.isIntersecting){let t=e.target;t.src=t.dataset.src,t.srcset=t.dataset.srcset,t.classList.remove("lazy"),o.unobserve(t)}}))}));e.forEach((function(e){o.observe(e)}));let s=new IntersectionObserver((function(e,t){e.forEach((function(e){e.isIntersecting&&(e.target.classList.add("visible"),s.unobserve(e.target))}))}));t.forEach((function(e){s.observe(e)}));let a=new IntersectionObserver((function(e,t){e.forEach((function(e){if(e.isIntersecting){let t=e.target;t.style.backgroundImage="url("+t.dataset.bg+")",a.unobserve(t)}}))}));n.forEach((function(e){a.observe(e)}))}else e.forEach((function(e){e.src=e.dataset.src,e.srcset=e.dataset.srcset})),t.forEach((function(e){e.classList.add("visible")})),n.forEach((function(e){e.style.backgroundImage="url("+e.dataset.bg+")"}))})),document.addEventListener("DOMContentLoaded",(function(){})),timeend=new Date,timeend=new Date(2020,5,28),time();